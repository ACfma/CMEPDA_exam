# -*- coding: utf-8 -*-
"""test_pca.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LLtwM2FwHDCc3kinElllJsAxFH6FE9bC
"""

import unittest
import os
import sklearn
import numpy as np
from sklearn.preprocessing import StandardScaler
import SimpleITK as sitk
import glob

dataset_path_CTRL = ''

file_CTRL = '/*CTRL*.nii' 

images_CTRL = [] 
data_CTRL = []

for image in glob.glob(os.path.normpath(file_CTRL), recursive=True):
  images_CTRL.append(sitk.ReadImage(image, imageIO = "NiftiImageIO"))
data_CTRL = [sitk.GetArrayViewFromImage(x) for x in images_CTRL]

img = sitk.GetArrayFromImage(images_CTRL[][:, , :])

class PCATest(unittest.TestCase):
    
    def setUp(self):
        self.X = img
        self.n_comp = 3
        
   def test_fit(self):

        self.X = StandardScaler().fit_transform(self.X)
        
        s_pca = sklearn.decomposition.PCA()
        s_pca.fit(self.X)
        s_cumulative_variance_explained=np.cumsum(s_pca.explained_variance_)
        
        covariance_matrix = np.cov(self.X.T) 
        eigen_values, eigen_vectors = np.linalg.eig(covariance_matrix)

        explained_variances_ratio = []
        for i in range(len(eigen_values)):
          explained_variances_ratio.append((eigen_values[i] / np.sum(eigen_values)))
 
      
        self.assertEqual(np.array(explained_variances_ratio).shape, s_pca.explained_variance_ratio_.shape)
        np.testing.assert_array_almost_equal(np.array(explained_variances_ratio),
                                             s_pca.explained_variance_ratio_, decimal=2)

if __name__=='__main__':
    unittest.main()